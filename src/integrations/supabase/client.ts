
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Default to empty strings to avoid errors during initialization
// Real values will be set from localStorage or the modal input
let SUPABASE_URL = '';
let SUPABASE_PUBLISHABLE_KEY = '';

// Try to get values from localStorage first
if (typeof window !== 'undefined') {
  SUPABASE_URL = localStorage.getItem('supabase_url') || '';
  SUPABASE_PUBLISHABLE_KEY = localStorage.getItem('supabase_anon_key') || '';
}

// Create the Supabase client with current values (could be empty initially)
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to update the Supabase client with new credentials
export const updateSupabaseClient = (url: string, key: string) => {
  // Create a new client with the provided credentials
  const newClient = createClient<Database>(url, key);
  
  // Update the export - this won't affect existing imports
  // but will affect future uses of the client in the same session
  Object.assign(supabase, newClient);
  
  return newClient;
};

// Helper functions for file upload
export const uploadFile = async (file: File, senderId: string, receiverId: string): Promise<string | null> => {
  try {
    const fileExt = file.name.split('.').pop();
    const fileName = `${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
    
    // Create path with sender and receiver IDs for better organization
    const filePath = `users/${senderId}/conversations/${receiverId}/${fileName}`;
    
    const { error: uploadError } = await supabase.storage
      .from('media')
      .upload(filePath, file);
      
    if (uploadError) {
      console.error('Error uploading file:', uploadError);
      return null;
    }
    
    const { data } = supabase.storage
      .from('media')
      .getPublicUrl(filePath);
      
    return data.publicUrl;
  } catch (error) {
    console.error('Error in uploadFile:', error);
    return null;
  }
};

export const getFileType = (file: File): "image" | "video" | "audio" | "document" | null => {
  const fileType = file.type.split('/')[0];
  
  switch (fileType) {
    case 'image':
      return 'image';
    case 'video':
      return 'video';
    case 'audio':
      return 'audio';
    default:
      if (file.type.includes('pdf') || 
          file.type.includes('doc') || 
          file.type.includes('sheet') || 
          file.type.includes('presentation')) {
        return 'document';
      }
      return null;
  }
};
