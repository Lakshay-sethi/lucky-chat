
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get credentials from environment vars or localStorage
const getSupabaseCredentials = () => {
  const envUrl = import.meta.env.VITE_SUPABASE_URL;
  const envKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
  
  // Get from localStorage if available
  const storedUrl = localStorage.getItem('supabase_url');
  const storedKey = localStorage.getItem('supabase_anon_key');
  
  return {
    url: storedUrl || envUrl,
    key: storedKey || envKey
  };
};

const credentials = getSupabaseCredentials();

if (!credentials.url || !credentials.key) {
  console.warn('Missing Supabase credentials. Please set them in the credentials modal.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export let supabase = createClient<Database>(
  credentials.url || '',
  credentials.key || ''
);

// Function to update the Supabase client with new credentials
export const updateSupabaseClient = (url: string, key: string) => {
  supabase = createClient<Database>(url, key);
  return supabase;
};

// Helper functions for file upload
export const uploadFile = async (file: File, senderId: string, receiverId: string): Promise<string | null> => {
  try {
    const fileExt = file.name.split('.').pop();
    const fileName = `${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
    
    // Create path with sender and receiver IDs for better organization
    const filePath = `users/${senderId}/conversations/${receiverId}/${fileName}`;
    
    const { error: uploadError } = await supabase.storage
      .from('media')
      .upload(filePath, file);
      
    if (uploadError) {
      console.error('Error uploading file:', uploadError);
      return null;
    }
    
    const { data } = supabase.storage
      .from('media')
      .getPublicUrl(filePath);
      
    return data.publicUrl;
  } catch (error) {
    console.error('Error in uploadFile:', error);
    return null;
  }
};

export const getFileType = (file: File): "image" | "video" | "audio" | "document" | null => {
  const fileType = file.type.split('/')[0];
  
  switch (fileType) {
    case 'image':
      return 'image';
    case 'video':
      return 'video';
    case 'audio':
      return 'audio';
    default:
      if (file.type.includes('pdf') || 
          file.type.includes('doc') || 
          file.type.includes('sheet') || 
          file.type.includes('presentation')) {
        return 'document';
      }
      return null;
  }
};
