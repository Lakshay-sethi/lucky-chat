
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from "@/hooks/use-toast";

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

let supabaseClient: ReturnType<typeof createClient> | null = null;

try {
  if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
    // Display a toast notification instead of throwing an error
    toast({
      title: "Missing Supabase Credentials",
      description: "Please set your Supabase URL and Anon Key in the environment variables.",
      variant: "destructive",
    });
  } else {
    // Create the client if we have valid credentials
    supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
  }
} catch (error) {
  console.error("Error initializing Supabase client:", error);
  toast({
    title: "Supabase Connection Error",
    description: "Failed to connect to Supabase. Please check your credentials.",
    variant: "destructive",
  });
}

// Export a safe version of the client
export const supabase = supabaseClient || createDummyClient();

// Create a dummy client that shows helpful error messages when methods are called
function createDummyClient() {
  const handler = {
    get: (target: any, prop: string) => {
      if (typeof prop === 'string' && !['then', 'catch', 'finally'].includes(prop)) {
        return new Proxy(() => {}, {
          apply: () => {
            toast({
              title: "Supabase Not Configured",
              description: "Please set your Supabase URL and Anon Key in the environment variables.",
              variant: "destructive",
            });
            return Promise.resolve({ error: { message: "Supabase client not initialized" } });
          },
          get: () => handler.get(target, prop)
        });
      }
      return undefined;
    }
  };
  
  return new Proxy({}, handler) as ReturnType<typeof createClient>;
}

// Helper functions for file upload
export const uploadFile = async (file: File, senderId: string, receiverId: string): Promise<string | null> => {
  try {
    if (!supabaseClient) {
      toast({
        title: "Upload Failed",
        description: "Supabase client not initialized. Please check your environment variables.",
        variant: "destructive",
      });
      return null;
    }
    
    const fileExt = file.name.split('.').pop();
    const fileName = `${Math.random().toString(36).substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
    
    // Create path with sender and receiver IDs for better organization
    const filePath = `users/${senderId}/conversations/${receiverId}/${fileName}`;
    
    const { error: uploadError } = await supabase.storage
      .from('media')
      .upload(filePath, file);
      
    if (uploadError) {
      console.error('Error uploading file:', uploadError);
      toast({
        title: "Upload Failed",
        description: uploadError.message,
        variant: "destructive",
      });
      return null;
    }
    
    const { data } = supabase.storage
      .from('media')
      .getPublicUrl(filePath);
      
    return data.publicUrl;
  } catch (error) {
    console.error('Error in uploadFile:', error);
    return null;
  }
};

export const getFileType = (file: File): "image" | "video" | "audio" | "document" | null => {
  const fileType = file.type.split('/')[0];
  
  switch (fileType) {
    case 'image':
      return 'image';
    case 'video':
      return 'video';
    case 'audio':
      return 'audio';
    default:
      if (file.type.includes('pdf') || 
          file.type.includes('doc') || 
          file.type.includes('sheet') || 
          file.type.includes('presentation')) {
        return 'document';
      }
      return null;
  }
};
